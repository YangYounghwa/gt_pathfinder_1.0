plugins {
    id 'java-library'
    id 'maven-publish'
}

group = 'apri'         // ← your groupId
version = '1.0.2'      // ← bump when you change the lib

java {
    toolchain { languageVersion = JavaLanguageVersion.of(21) }
    withSourcesJar()
    withJavadocJar()
}

repositories {
    mavenLocal()
    maven { url 'https://repo.osgeo.org/repository/release/' }
    maven { url 'https://repository.jboss.org/nexus/content/repositories/thirdparty-releases/' } // ← JAI here
    mavenCentral()
}

dependencies {
    // --- GeoTools (stick to one version across all modules) ---
    api 'org.geotools:gt-main:31.6'
    api 'org.geotools:gt-api:31.6'
    api 'org.geotools:gt-referencing:31.6'
    api 'org.geotools:gt-shapefile:31.6'
    api 'org.geotools:gt-geojson-core:31.6'
    api 'org.geotools:gt-graph:31.6'
    api 'org.geotools:gt-cql:31.6'
    api 'org.geotools:gt-epsg-hsql:31.6'
    api 'org.geotools:gt-epsg-extension:31.6'
    runtimeOnly  "org.hsqldb:hsqldb:2.7.2"

    // --- Geometry / CSV ---
    api 'org.locationtech.jts:jts-core:1.18.2'
    api 'org.opengis:geoapi:3.0.1'
    api 'com.opencsv:opencsv:5.9'

    testImplementation 'org.junit.jupiter:junit-jupiter:5.10.2'
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}

test {
    useJUnitPlatform()
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            // Optional: force artifactId (defaults to rootProject.name)
            artifactId = 'finderLib'
        }
    }
    repositories {
        // For local development
        mavenLocal()
        // Optionally, add a remote repo later (Nexus/GH Packages/etc.)
        // maven { url = uri("https://your.nexus/repository/maven-releases/") }
    }
}


tasks.named('javadoc') {
    enabled = false
}